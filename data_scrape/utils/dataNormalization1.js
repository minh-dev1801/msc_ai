import { ChatPromptTemplate } from "@langchain/core/prompts";
import { ChatOpenAI } from "@langchain/openai";
import { RunnableSequence } from "@langchain/core/runnables";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import "dotenv/config";

const NETWORK_COMPANIES_1 = [
  "Palo Alto",
  "Fortinet",
  "Cisco",
  "Check Point",
  "Sophos",
  "McAfee",
  "Trend Micro",
  "CrowdStrike",
  "Barracuda",
  "SonicWall",
  "Bitdefender",
  "FireEye",
  "Qualys",
  "WatchGuard",
  "Zscaler",
  "A10",
  "Radware",
  "Proofpoint",
  "CyberArk",
  "Elastic Security",
  "Ivanti",
  "Forcepoint",
  "F5",
  "Tanium",
  "SentinelOne",
  "AlienVault",
  "Rapid7",
  "Imperva",
  "LogRhythm",
  "Darktrace",
  "Vormetric",
  "Paessler",
];

const CONFIG = {
  CATEGORIES_FILE: "categories.json",
  CATEGORIES_PATH: "../configs/categories.json",
  TARGET_VENDORS: NETWORK_COMPANIES_1,
};

const configCategories = (categories = null) => {
  const currentDir = path.dirname(fileURLToPath(import.meta.url));
  const configPath = path.join(currentDir, CONFIG.CATEGORIES_PATH);
  return {
    configPath,
    flatCategoriesValue: categories ? Object.values(categories).flat() : null,
    flatCategoriesKey: categories ? Object.keys(categories) : null,
    flatCategoriesKeyLength: categories ? Object.keys(categories).length : null,
    flatCategoriesValueLength: categories
      ? Object.values(categories).flat().length
      : null,
  };
};

const loadCategories = () => {
  try {
    const configPath = configCategories().configPath;
    if (!fs.existsSync(configPath)) {
      console.warn(
        "File c·∫•u h√¨nh categories.json kh√¥ng t·ªìn t·∫°i, s·ª≠ d·ª•ng c·∫•u h√¨nh m·∫∑c ƒë·ªãnh"
      );
    }
    const data = fs.readFileSync(configPath, "utf8");
    return JSON.parse(data);
  } catch (error) {
    console.error("L·ªói khi ƒë·ªçc file c·∫•u h√¨nh lƒ©nh v·ª±c:", error);
  }
};

const generateCategoryPrompt = (categories) => {
  const flatCategories = configCategories(categories).flatCategoriesValue;
  return `D·ª±a v√†o ti√™u ƒë·ªÅ {title}, tr·∫£ v·ªÅ CH√çNH X√ÅC m·ªôt trong c√°c lƒ©nh v·ª±c sau (ch·ªâ tr·∫£ v·ªÅ t√™n lƒ©nh v·ª±c, kh√¥ng th√™m b·∫•t k·ª≥ t·ª´ n√†o kh√°c): ${flatCategories.join(
    ", "
  )}`;
};

const NETWORK_COMPANIES = CONFIG.TARGET_VENDORS;

// H√†m ki·ªÉm tra t√≠nh li√™n quan c·ªßa bid v·ªõi c√°c c√¥ng ty m·∫°ng
const checkNetworkCompanyRelevance = (details) => {
  if (!details || !details.bideContractorInputResultDTO) {
    return false;
  }

  const { bidName, lotResultDTO } = details.bideContractorInputResultDTO;

  if (
    bidName &&
    NETWORK_COMPANIES.some((company) =>
      bidName.toLowerCase().includes(company.toLowerCase())
    )
  ) {
    return true;
  }

  if (lotResultDTO && Array.isArray(lotResultDTO)) {
    for (const lot of lotResultDTO) {
      // Ki·ªÉm tra lotName
      if (
        lot.lotName &&
        NETWORK_COMPANIES.some((company) =>
          lot.lotName.toLowerCase().includes(company.toLowerCase())
        )
      ) {
        return true;
      }

      // Ki·ªÉm tra goodsList
      if (lot.goodsList) {
        try {
          const goodsList = JSON.parse(lot.goodsList);
          for (const good of goodsList) {
            const fieldsToCheck = [
              good.name,
              good.origin,
              good.manufacturer,
              good.feature,
            ];
            for (const field of fieldsToCheck) {
              if (
                field &&
                NETWORK_COMPANIES.some((company) =>
                  field.toLowerCase().includes(company.toLowerCase())
                )
              ) {
                return true;
              }
            }
          }
        } catch (error) {
          console.error("L·ªói khi parse goodsList:", error);
        }
      }
    }
  }

  return false;
};

// H√†m tr√≠ch xu·∫•t danh s√°ch nh√† cung c·∫•p t·ª´ bid (bao g·ªìm c·∫£ t√™n bid v√† details)
const extractVendors = (bid) => {
  try {
    if (!bid.details) return;

    // Object ƒë·ªÉ l∆∞u t√™n c√¥ng ty v√† s·ªë l∆∞·ª£ng
    const vendors = {};

    // H√†m tƒÉng s·ªë l∆∞·ª£ng cho c√¥ng ty trong vendors
    const incrementVendorCount = (company) => {
      vendors[company] = (vendors[company] || 0) + 1;
    };

    // Bi·∫øn ƒë·ªÉ ƒë·∫øm s·ªë l∆∞·ª£ng good.id
    let idCount = 0;
    // Set ƒë·ªÉ theo d√µi c√°c good.id duy nh·∫•t
    const uniqueIds = new Set();

    // X·ª≠ l√Ω goodsList tr∆∞·ªõc
    const { lotResultDTO } = bid.details.bideContractorInputResultDTO;

    if (lotResultDTO && Array.isArray(lotResultDTO)) {
      lotResultDTO.forEach((lot) => {
        // Ki·ªÉm tra goodsList
        if (lot.goodsList) {
          // Ki·ªÉm tra n·∫øu goodsList l√† chu·ªói JSON
          if (typeof lot.goodsList === "string") {
            const goodsList = JSON.parse(lot.goodsList).listTG;

            // Ki·ªÉm tra n·∫øu goodsList sau khi parse l√† m·ªôt m·∫£ng
            if (Array.isArray(goodsList)) {
              goodsList.forEach((good) => {
                const fieldsToCheck = [good.serviceCategory, good.id];

                fieldsToCheck.forEach((field) => {
                  if (field) {
                    // ƒê·∫øm good.id
                    if (field === good.id) {
                      idCount++;
                    }
                    NETWORK_COMPANIES_1.forEach((company) => {
                      const regexPattern = company.includes(" ")
                        ? new RegExp(company.replace(/\s+/g, "\\s*"), "i")
                        : new RegExp(company, "i");

                      if (regexPattern.test(field)) {
                        incrementVendorCount(company);
                      }
                    });
                  }
                });
              });
            }
          }
        }
      });
    }

    if (
      Object.keys(vendors).length === 0 &&
      lotResultDTO &&
      Array.isArray(lotResultDTO)
    ) {
      lotResultDTO.forEach((lot) => {
        // Ki·ªÉm tra goodsList
        if (lot.goodsList) {
          // Ki·ªÉm tra n·∫øu goodsList l√† chu·ªói JSON
          if (typeof lot.goodsList === "string") {
            try {
              const goodsList = JSON.parse(lot.goodsList);
              // Ki·ªÉm tra goodsList l√† m·∫£ng v√† kh√¥ng r·ªóng
              if (!Array.isArray(goodsList) || !goodsList.length) return;
              // Ki·ªÉm tra c·∫•u tr√∫c c·ªßa goodsList[0]
              if (
                !goodsList[0].formValue ||
                !goodsList[0].formValue.lotContent ||
                !Array.isArray(goodsList[0].formValue.lotContent.Table)
              )
                return;

              goodsList[0].formValue.lotContent.Table.forEach((table) => {
                if (table && table.id) {
                  // Ch·ªâ ƒë·∫øm n·∫øu id ch∆∞a t·ªìn t·∫°i trong uniqueIds
                  if (!uniqueIds.has(table.id)) {
                    uniqueIds.add(table.id);
                    idCount++;
                  }

                  NETWORK_COMPANIES_1.forEach((company) => {
                    const regexPattern = company.includes(" ")
                      ? new RegExp(company.replace(/\s+/g, "\\s*"), "i")
                      : new RegExp(company, "i");

                    if (
                      table.manufacturer &&
                      regexPattern.test(table.manufacturer)
                    ) {
                      incrementVendorCount(company);
                    }
                  });
                }
              });
            } catch (e) {
              console.error("JSON parsing error: ", e);
            }
          }
        }
      });
    }

    // N·∫øu goodsList kh√¥ng c√≥ vendor, m·ªõi ki·ªÉm tra bidName
    if (Object.keys(vendors).length === 0 && bid.bidName) {
      const bidName = Array.isArray(bid.bidName) ? bid.bidName[0] : bid.bidName;
      NETWORK_COMPANIES_1.forEach((company) => {
        const regexPattern = company.includes(" ")
          ? new RegExp(company.replace(/\s+/g, "\\s*"), "i")
          : new RegExp(company, "i");

        // Ch·ªâ th√™m c√¥ng ty n·∫øu ch∆∞a t·ªìn t·∫°i trong vendors t·ª´ bidName
        if (regexPattern.test(bidName) && !(company in vendors)) {
          incrementVendorCount(company);
        }
      });
    }
    // Tr·∫£ v·ªÅ object vendors ch·ª©a t√™n c√¥ng ty v√† s·ªë l∆∞·ª£ng
    return vendors;
  } catch (error) {
    console.error("L·ªói khi get vendor:", error);
  }
};

export const cleanAndNormalizeBidData = async (rawData) => {
  const FIELD_CATEGORIES = loadCategories();
  const {
    flatCategoriesKeyLength: groupLength,
    flatCategoriesValueLength: fieldLength,
  } = configCategories(FIELD_CATEGORIES);
  const categoryPrompt = generateCategoryPrompt(FIELD_CATEGORIES);

  console.log(
    `ƒê√£ t·∫£i ${groupLength} nh√≥m lƒ©nh v·ª±c v·ªõi t·ªïng c·ªông ${fieldLength} lƒ©nh v·ª±c`
  );

  const chain = RunnableSequence.from([
    ChatPromptTemplate.fromTemplate(categoryPrompt),
    new ChatOpenAI({
      modelName: "gpt-4o-mini",
      maxTokens: 10,
      temperature: 0,
      stop: ["\n"],
      openAIApiKey: process.env.OPENAI_API_KEY,
    }),
  ]);

  try {
    await chain.invoke({ title: "Test API Key" });
  } catch (error) {
    switch (error?.code || error?.response?.status) {
      case "invalid_api_key":
      case 401:
        throw new Error(
          "üîë OpenAI API Key kh√¥ng h·ª£p l·ªá. Ki·ªÉm tra key t·∫°i: https://platform.openai.com/api-keys"
        );
      case "insufficient_quota":
      case 429:
        throw new Error(
          "‚ö†Ô∏è H·∫øt h·∫°n ng·∫°ch (quota). Ki·ªÉm tra t·∫°i: https://platform.openai.com/usage"
        );
      case 402:
        throw new Error(
          "üí≥ H·∫øt credit. N·∫°p ti·ªÅn t·∫°i: https://platform.openai.com/billing"
        );
      default:
        console.error("L·ªói t·ª´ OpenAI API:", error.message);
        throw new Error(`üö® L·ªói khi g·ªçi OpenAI: ${error.message}`);
    }
  }

  const closeDateThreshold = new Date();

  const cleanedData = await Promise.all(
    rawData.map(async (bid) => {
      try {
        const result = await chain.invoke({
          title: bid.bidName[0] || "",
        });

        const fieldCategory = result.content.trim();

        let fieldGroup = "OTHER";
        for (const [group, fields] of Object.entries(FIELD_CATEGORIES)) {
          if (fields.includes(fieldCategory)) {
            fieldGroup = group;
            break;
          }
        }

        const bidCloseDate = new Date(bid.bidCloseDate);

        const year = isNaN(bidCloseDate.getTime())
          ? null
          : bidCloseDate.getFullYear();

        const isClosed =
          year === null ? false : bidCloseDate <= closeDateThreshold;

        const hasWinner = isClosed && bid.statusForNotify === "CNTTT";

        let vendors = extractVendors(bid) || {};

        return {
          bidName: Array.isArray(bid.bidName) ? bid.bidName[0] : bid.bidName,
          bidCloseDate: bid.bidCloseDate,
          year,
          isClosed,
          hasWinner,
          investorName: bid.investorName?.trim().replace(/\s+/g, " ") || null,
          bidPrice: Number(
            Array.isArray(bid.bidPrice) ? bid.bidPrice[0] : bid.bidPrice
          ),
          fieldCategory,
          fieldGroup,
          vendors,
        };
      } catch (error) {
        console.error(`L·ªói x·ª≠ l√Ω bid ${bid.id}:`, error);
        return null;
      }
    })
  );

  const validData = cleanedData.filter((result) => result !== null);

  if (validData.length > 0) {
    try {
      await fs.promises.writeFile(
        "./cleanedData.json",
        JSON.stringify(validData, null, 2)
      );
      console.log(
        `X·ª≠ l√Ω th√†nh c√¥ng: ${validData.length}/${rawData.length} b·∫£n ghi`
      );
    } catch (error) {
      console.error("L·ªói khi ghi file:", error);
    }
  } else {
    console.log("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ l∆∞u");
  }

  return validData;
};
